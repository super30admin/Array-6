#Best Time to Buy and Sell Stock
#tc:O(n)
#sc:O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        buy_min, profit = float(inf), 0
        for i in range(len(prices)):
            buy_min = min(prices[i], buy_min)
            profit = max(prices[i] - buy_min, profit)
        return profit
#Best Time to Buy and Sell Stock with Cooldown
#tc: O(n)
#sc: O(n)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        @lru_cache(None)
        def dp(i, canBuy):
            if i >= len(prices):
                return 0
            ans = dp(i+1, canBuy)  # Skip
            if canBuy:
                ans = max(ans, dp(i+1, False) - prices[i])  # Buy
            else:
                ans = max(ans, dp(i+2, True) + prices[i])  # Sell
            return ans
                
        return dp(0, True)
#Best Time to Buy and Sell Stock III
#tc: O(n^2)
#sc: O(k)
class Solution:
    def maxProfit(self, prices):
        if len(prices) <= 1: return 0
        n, k = len(prices), 2

        B = [prices[i+1] - prices[i] for i in range(len(prices) - 1)]
        if k > len(prices)//2: return sum(x for x in B if x > 0)
        
        dp = [[0]*(k+1) for _ in range(n-1)] 
        mp = [[0]*(k+1) for _ in range(n-1)] 

        dp[0][1], mp[0][1] = B[0], B[0]

        for i in range(1, n-1):
            for j in range(1, k+1):
                dp[i][j] = max(mp[i-1][j-1], dp[i-1][j]) + B[i]
                mp[i][j] = max(dp[i][j], mp[i-1][j])

        return max(mp[-1])
#Best Time to Buy and Sell Stock IV
#tc: O(nk)
#sc: O(k)
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        dp = [[-float('inf'), -float('inf')] for _ in range(k + 1)]
        dp[0][1] = 0
        for price in prices:
            dp = [dp[0]] + [[max(dp[i][0], dp[i - 1][1] - price), max(dp[i][1], dp[i][0] + price)] for i in range(1, len(dp))]
        return max(dp[i][1] for i in range(len(dp)))
     
